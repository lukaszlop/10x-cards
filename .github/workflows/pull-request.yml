name: Pull Request Validation

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  # Job 1: Lintowanie kodu
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      NODE_ENV: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            .eslintcache
            node_modules/.cache
          key: ${{ runner.os }}-lint-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-lint-

      - name: Setup Node.js and Dependencies
        uses: ./.github/actions/setup-node
        with:
          node-version: "22"
          timeout-minutes: 5

      - name: Run ESLint (CI-friendly)
        run: npm run lint:ci
        timeout-minutes: 5

  # Job 2: Testy jednostkowe (równolegle z e2e-test)
  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 15
    env:
      NODE_ENV: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            .eslintcache
            node_modules/.cache
          key: ${{ runner.os }}-unit-test-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-unit-test-

      - name: Setup Node.js and Dependencies
        uses: ./.github/actions/setup-node
        with:
          node-version: "22"
          timeout-minutes: 5

      - name: Run unit tests with coverage
        run: npx vitest run --coverage
        timeout-minutes: 10

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 7

  # Job 3: Testy E2E (równolegle z unit-test)
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 45
    env:
      NODE_ENV: integration
      CI: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            .eslintcache
            node_modules/.cache
          key: ${{ runner.os }}-e2e-test-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-e2e-test-

      - name: Setup Node.js and Dependencies
        uses: ./.github/actions/setup-node
        with:
          node-version: "22"
          timeout-minutes: 5

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
            ~/Library/Caches/ms-playwright
            %USERPROFILE%\AppData\Local\ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
        timeout-minutes: 8
        if: steps.playwright-cache.outputs.cache-hit != 'true'

      - name: Install Playwright dependencies only
        run: npx playwright install-deps chromium
        timeout-minutes: 3
        if: steps.playwright-cache.outputs.cache-hit == 'true'

      - name: Setup E2E Environment
        uses: ./.github/actions/setup-e2e-env
        with:
          e2e-username: ${{ secrets.E2E_USERNAME }}
          e2e-password: ${{ secrets.E2E_PASSWORD }}
          e2e-username-id: ${{ secrets.E2E_USERNAME_ID }}
          test-supabase-url: ${{ secrets.TEST_SUPABASE_URL }}
          test-supabase-key: ${{ secrets.TEST_SUPABASE_KEY }}

      - name: Run E2E tests with coverage
        run: |
          echo "🧪 Running E2E tests with integration environment..."
          npm run test:e2e
        timeout-minutes: 30

      - name: Upload E2E test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-coverage
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  # Job 4: Status comment (tylko po sukcesie poprzednich 3 jobów)
  status-comment:
    name: PR Status Comment
    runs-on: ubuntu-latest
    needs: [lint, unit-test, e2e-test]
    if: always() && (needs.lint.result == 'success' && needs.unit-test.result == 'success' && needs.e2e-test.result == 'success')
    timeout-minutes: 5
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create success comment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const comment = `## ✅ Pull Request Validation Successful

            **All checks passed successfully!** 🎉

            ### 📋 Validation Summary
            - ✅ **Code Linting**: Passed
            - ✅ **Unit Tests**: Passed
            - ✅ **E2E Tests**: Passed

            ### 📊 Test Coverage
            - Unit test coverage reports available in artifacts
            - E2E test reports available in artifacts

            ### 🚀 Ready for Review
            This pull request has passed all automated checks and is ready for code review.

            ---
            *Automated comment by GitHub Actions*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Job 5: Failure comment (uruchamia się gdy któryś z jobów się nie powiedzie)
  failure-comment:
    name: PR Failure Comment
    runs-on: ubuntu-latest
    needs: [lint, unit-test, e2e-test]
    if: always() && (needs.lint.result == 'failure' || needs.unit-test.result == 'failure' || needs.e2e-test.result == 'failure')
    timeout-minutes: 5
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create failure comment
        uses: actions/github-script@v7
        with:
          script: |
            const lintResult = '${{ needs.lint.result }}';
            const unitTestResult = '${{ needs.unit-test.result }}';
            const e2eTestResult = '${{ needs.e2e-test.result }}';

            let comment = `## ❌ Pull Request Validation Failed

            **Some checks failed.** Please review and fix the issues below.

            ### 📋 Validation Summary
            - ${lintResult === 'success' ? '✅' : '❌'} **Code Linting**: ${lintResult === 'success' ? 'Passed' : 'Failed'}
            - ${unitTestResult === 'success' ? '✅' : '❌'} **Unit Tests**: ${unitTestResult === 'success' ? 'Passed' : 'Failed'}
            - ${e2eTestResult === 'success' ? '✅' : '❌'} **E2E Tests**: ${e2eTestResult === 'success' ? 'Passed' : 'Failed'}

            ### 🔧 Next Steps
            `;

            if (lintResult === 'failure') {
              comment += `
            - **Fix linting issues**: Run \`npm run lint:fix\` locally to automatically fix some issues
            - **Check linting errors**: Run \`npm run lint\` to see detailed error reports`;
            }

            if (unitTestResult === 'failure') {
              comment += `
            - **Fix unit tests**: Run \`npm run test\` locally to debug failing tests
            - **Check test coverage**: Ensure new code has adequate test coverage`;
            }

            if (e2eTestResult === 'failure') {
              comment += `
            - **Fix E2E tests**: Run \`npm run test:e2e\` locally to debug failing tests
            - **Check E2E reports**: Review the uploaded Playwright reports for detailed failure information`;
            }

            comment += `

            ### 📊 Available Artifacts
            - Check the "Actions" tab for detailed logs and test reports
            - E2E test reports and screenshots are available in artifacts (if generated)

            ---
            *Automated comment by GitHub Actions*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
