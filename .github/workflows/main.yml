name: Test and Build main

on:
  # Uruchomienie po push do main branch
  push:
    branches: [main]

  # Możliwość uruchomienia manualnego
  workflow_dispatch:

  # Uruchomienie na pull requestach do main
  pull_request:
    branches: [main]

jobs:
  # Job 1: Linting i testy jednostkowe
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      NODE_ENV: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci
        timeout-minutes: 5

      - name: Run ESLint (CI-friendly)
        run: npm run lint:ci
        timeout-minutes: 3

      - name: Run unit tests with coverage
        run: npx vitest run --coverage
        timeout-minutes: 10

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: always()
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          # token: ${{ secrets.CODECOV_TOKEN }}  # Odkomentuj po dodaniu tokena do GitHub Secrets

  # Job 2: Build produkcyjny
  build:
    name: Production Build
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 20
    env:
      NODE_ENV: production
      # Add Supabase variables for build-time compilation
      PUBLIC_SUPABASE_URL: http://localhost:54321
      PUBLIC_SUPABASE_KEY: test_key

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci
        timeout-minutes: 5

      - name: Build for production
        run: npm run build
        timeout-minutes: 10

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist/
          retention-days: 7

  # Job 3: Testy E2E na wersji produkcyjnej
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 30
    env:
      NODE_ENV: test
      E2E_USERNAME: test@example.com
      E2E_PASSWORD: test_password_123
      PUBLIC_SUPABASE_URL: http://localhost:54321
      PUBLIC_SUPABASE_KEY: test_key
      CI: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci
        timeout-minutes: 5

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: dist/

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
        timeout-minutes: 5

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          NODE_ENV=${{ env.NODE_ENV }}
          E2E_USERNAME=${{ env.E2E_USERNAME }}
          E2E_PASSWORD=${{ env.E2E_PASSWORD }}
          PUBLIC_SUPABASE_URL=${{ env.PUBLIC_SUPABASE_URL }}
          PUBLIC_SUPABASE_KEY=${{ env.PUBLIC_SUPABASE_KEY }}
          EOF

      - name: Verify environment variables
        run: |
          echo "🔍 Checking environment variables..."
          echo "NODE_ENV: ${{ env.NODE_ENV }}"
          echo "PUBLIC_SUPABASE_URL: ${{ env.PUBLIC_SUPABASE_URL }}"
          echo "PUBLIC_SUPABASE_KEY: ${{ env.PUBLIC_SUPABASE_KEY }}"
          echo "📋 Contents of .env.test:"
          cat .env.test

      - name: Verify environment variables for Playwright
        env:
          PUBLIC_SUPABASE_URL: ${{ env.PUBLIC_SUPABASE_URL }}
          PUBLIC_SUPABASE_KEY: ${{ env.PUBLIC_SUPABASE_KEY }}
          NODE_ENV: ${{ env.NODE_ENV }}
        run: |
          echo "🔍 Checking environment variables available to Playwright..."
          echo "PUBLIC_SUPABASE_URL: $PUBLIC_SUPABASE_URL"
          echo "PUBLIC_SUPABASE_KEY: $PUBLIC_SUPABASE_KEY"
          echo "NODE_ENV: $NODE_ENV"
          echo "CI: $CI"

      - name: Run E2E tests
        env:
          PUBLIC_SUPABASE_URL: ${{ env.PUBLIC_SUPABASE_URL }}
          PUBLIC_SUPABASE_KEY: ${{ env.PUBLIC_SUPABASE_KEY }}
        run: |
          # Load environment variables from .env.test
          echo "🔧 Loading environment variables from .env.test..."
          set -a && source .env.test && set +a

          # Verify variables are loaded
          echo "✅ Loaded variables:"
          echo "  PUBLIC_SUPABASE_URL: $PUBLIC_SUPABASE_URL"
          echo "  PUBLIC_SUPABASE_KEY: $PUBLIC_SUPABASE_KEY"
          echo "  NODE_ENV: $NODE_ENV"

          # Playwright will manage the preview server automatically
          echo "🧪 Running E2E tests (Playwright will start preview server)..."
          npm run test:e2e
        timeout-minutes: 15

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Job 4: Podsumowanie rezultatów
  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [test, build, e2e]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Check pipeline status
        run: |
          echo "=== Pipeline Summary ==="
          echo "Test job: ${{ needs.test.result }}"
          echo "Build job: ${{ needs.build.result }}"
          echo "E2E job: ${{ needs.e2e.result }}"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

          if [[ "${{ needs.build.result }}" == "success" && "${{ needs.e2e.result }}" == "success" ]]; then
            echo "✅ Core pipeline stages completed successfully!"
            echo "📋 Test job: ${{ needs.test.result }} (allowed to fail for linting issues)"
          else
            echo "❌ Pipeline failed - check individual job results"
            echo "📊 Job results breakdown:"
            echo "  - Test & Lint: ${{ needs.test.result }} (non-blocking)"
            echo "  - Production Build: ${{ needs.build.result }}"
            echo "  - E2E Tests: ${{ needs.e2e.result }}"
            exit 1
          fi
        timeout-minutes: 1
