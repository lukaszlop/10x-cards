// DTO and Command Model definitions for the API
// Import base database type helpers from the database models
import type { Tables } from "./db/database.types";

/**
 * FlashcardResponseDTO represents a flashcard as retrieved from the database.
 * Derived from the flashcards table row in the public schema.
 */
export type FlashcardResponseDTO = Tables<"flashcards">;

/**
 * PaginationDTO holds pagination information for list responses.
 */
export interface PaginationDTO {
  page: number;
  limit: number;
  total: number;
}

/**
 * FlashcardsResponseDTO is used for the GET /flashcards response.
 */
export interface FlashcardsResponseDTO {
  data: FlashcardResponseDTO[];
  pagination: PaginationDTO;
}

export type Source = "ai-full" | "ai-edited" | "manual";

/**
 * CreateFlashcardDTO variants ensure proper structure based on the flashcard source.
 * For manual flashcards, generation_id must be null.
 * For AI-generated flashcards, generation_id is required.
 */
export interface ManualFlashcardDTO {
  front: string;
  back: string;
  source: Extract<Source, "manual">;
  generation_id: null;
}

export interface AIFullFlashcardDTO {
  front: string;
  back: string;
  source: Extract<Source, "ai-full">;
  generation_id: number;
}

export interface AIEditedFlashcardDTO {
  front: string;
  back: string;
  source: Extract<Source, "ai-edited">;
  generation_id: number;
}

export type CreateFlashcardDTO = ManualFlashcardDTO | AIFullFlashcardDTO | AIEditedFlashcardDTO;

/**
 * CreateFlashcardsCommand is the command model for POST /flashcards endpoint.
 * It accepts an array of flashcards to be created.
 */
export interface CreateFlashcardsCommand {
  flashcards: CreateFlashcardDTO[];
}

/**
 * UpdateFlashcardDTO is the command model for PUT /flashcards/{id} endpoint.
 * Only a subset of fields can be updated: front, back, and source.
 * Note: generation_id update is optional depending on business logic.
 */
export type UpdateFlashcardDTO = Partial<{
  front: string;
  back: string;
  source: Extract<Source, "manual" | "ai-edited">;
  generation_id: number;
}>;

/**
 * CreateGenerationCommand is the command model for POST /generations endpoint.
 * It contains the source text for which flashcard proposals are to be generated.
 */
export interface CreateGenerationCommand {
  source_text: string;
}

/**
 * GenerationFlashcardProposal represents a proposed flashcard generated by the AI.
 * According to the API plan, its source is typically 'ai-full'.
 */
export interface GenerationFlashcardProposal {
  front: string;
  back: string;
  source: Extract<Source, "ai-full">;
}

/**
 * GenerationDTO is the response DTO for generation endpoints.
 * It includes the generation ID, flashcard proposals, count of generated flashcards,
 * and optionally detailed flashcard information.
 */
export interface GenerationDTO {
  generation_id: number;
  flashcards_proposals: GenerationFlashcardProposal[];
  generated_count: number;
  flashcards?: FlashcardResponseDTO[];
}

/**
 * GenerationErrorLogDTO represents an error log entry from the generations error logs.
 * It is directly derived from the generation_error_logs table row in the database.
 */
export type GenerationErrorLogDTO = Tables<"generation_error_logs">;

// Frontend-specific ViewModels

/**
 * ProposalViewModel represents a flashcard proposal in the UI.
 * It extends the data from the API with UI state, including edited and accepted flags.
 */
export interface ProposalViewModel {
  /** A unique client-side identifier for React keys and easier state management. */
  id: string;
  /** The original front text of the flashcard from the API. */
  originalFront: string;
  /** The original back text of the flashcard from the API. */
  originalBack: string;
  /** The current front text of the flashcard, which can be edited by the user. */
  currentFront: string;
  /** The current back text of the flashcard, which can be edited by the user. */
  currentBack: string;
  /** A flag that is set to `true` if `currentFront !== originalFront` or `currentBack !== originalBack`. Initially `false`. */
  isEdited: boolean;
  /** A flag indicating whether the user has accepted this proposal for saving. */
  isAccepted: boolean;
  /** Stores the `generation_id` associated with this proposal, important for saving. */
  generation_id_internal?: number;
}

/**
 * GenerationViewState aggregates all the state needed for the GenerationsView.
 */
export interface GenerationViewState {
  /** The source text entered by the user in the FlashcardGenerationForm. */
  sourceText: string;
  /** A flag indicating that flashcard proposals are being fetched from the API. */
  isLoadingProposals: boolean;
  /** A flag indicating that flashcards are being saved to the API. */
  isSavingFlashcards: boolean;
  /** The list of currently displayed/modified flashcard proposals. */
  proposals: ProposalViewModel[];
  /** The ID of the last successful generation, retrieved from the API response. */
  generationId: number | null;
  /** A global error message for the view (e.g., API error). */
  error: string | null;
  /** The index of the proposal currently being edited in the modal. */
  editingProposalIndex: number | null;
}
